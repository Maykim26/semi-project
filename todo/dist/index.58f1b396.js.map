{"mappings":"ACQA,IAAI,EAAY,SAAS,cAAc,CAAC,cACpC,EAAS,SAAS,cAAc,CAAC,WACjC,EAAO,SAAS,gBAAgB,CAAC,kBACjC,EAAY,SAAS,cAAc,CAAC,aACpC,EAAW,EAAE,CACb,EAAO,MACP,EAAa,EAAE,CAGnB,EAAO,gBAAgB,CAAC,YAAa,GAErC,EAAU,gBAAgB,CAAC,UAAW,SAAU,CAAK,EAC3B,KAAlB,EAAM,OAAO,EACb,EAAQ,EAEhB,GAEA,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,CAAE,IAC7B,CAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,QAAS,SAAU,CAAK,GAC7C,AAmER,SAAgB,CAAC,EAUb,GATI,IACA,EAAO,EAAE,MAAM,CAAC,EAAE,CAClB,EAAU,KAAK,CAAC,KAAK,CAAG,EAAE,MAAM,CAAC,WAAW,CAAG,KAC/C,EAAU,KAAK,CAAC,IAAI,CAAG,EAAE,MAAM,CAAC,UAAU,CAAG,KAC7C,EAAU,KAAK,CAAC,GAAG,CACf,EAAE,MAAM,CAAC,SAAS,CAAI,CAAA,EAAE,MAAM,CAAC,YAAY,CAAG,CAAA,EAAK,MAG3D,EAAa,EAAE,CACX,AAAQ,WAAR,EACA,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,MAAM,CAAE,IACF,CAAA,IAA3B,CAAQ,CAAC,EAAE,CAAC,UAAU,EACtB,EAAW,IAAI,CAAC,CAAQ,CAAC,EAAE,OAGhC,GAAI,AAAQ,QAAR,EACP,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,MAAM,CAAE,IACF,CAAA,IAA3B,CAAQ,CAAC,EAAE,CAAC,UAAU,EACtB,EAAW,IAAI,CAAC,CAAQ,CAAC,EAAE,EAIvC,GACJ,EA3Fe,EACX,GAGJ,SAAS,IACL,IAAI,EAAY,EAAU,KAAK,CAC/B,GAAI,AAAc,KAAd,EAAkB,OAAO,MAAM,cACnC,IAAI,EAAO,CACP,GAqFG,IAAM,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,EAAG,GApF9C,WAAY,CAAA,EACZ,YAAa,CACjB,EACA,EAAS,IAAI,CAAC,GACd,EAAU,KAAK,CAAG,GAClB,GACJ,CAEA,SAAS,IACL,IAAI,EAAa,GACjB,KAAO,EAAE,CAEL,AAAS,QAAT,EACA,KAAO,EACA,CAAA,AAAS,YAAT,GAAsB,AAAS,SAAT,CAAS,GACtC,CAAA,KAAO,CADJ,EAGP,IAAK,IAAI,EAAI,EAAG,EAAI,KAAK,MAAM,CAAE,IACzB,AAAsB,CAAA,GAAtB,IAAI,CAAC,EAAE,CAAC,UAAU,CAClB,GAAc,CAAC;AACV,iBAAA,EAAE,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC;A;AAE2B,kEAAA,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,6DAA6D,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC;A;AAE3I,cAAA,CAAC,CAEH,GAAc,CAAC;AACd,aAAA,EAAE,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC;A;AAE2B,8DAAA,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,6DAA6D,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC;A;AAE3I,UAAA,CAAC,AAGP,CAAA,SAAS,cAAc,CAAC,cAAc,SAAS,CAAG,CACtD","sources":["<anon>","js/main.js"],"sourcesContent":["//유저가 값을 입력한다.\n// + 버튼누르면, 할일 추가\n//delete 버튼 누르면 할일 삭제\n//check버튼 누르면 할일이 끝나면서 밑줄이 간다\n//1. check 버튼을 클릭하는 순간 true false\n//2. true 면 끝난걸로 간주하고 밑줄그어주기\n//3. false면 안끝난거 원래대로\nlet taskInput = document.getElementById(\"task-input\");\nlet addBtn = document.getElementById(\"add-btn\");\nlet tabs = document.querySelectorAll(\".task-tabs div\");\nlet underLine = document.getElementById(\"underline\");\nlet taskList = [];\nlet mode = \"all\";\nlet filterList = [];\n// let list = [];\naddBtn.addEventListener(\"mousedown\", addTask);\ntaskInput.addEventListener(\"keydown\", function(event) {\n    if (event.keyCode === 13) addTask(event);\n});\nfor(let i = 1; i < tabs.length; i++)tabs[i].addEventListener(\"click\", function(event) {\n    filter(event);\n});\nfunction addTask() {\n    let taskValue = taskInput.value;\n    if (taskValue === \"\") return alert(\"\\uD560\\uC77C\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\");\n    let task = {\n        id: randomIDGenerate(),\n        isComplete: false,\n        taskContent: taskValue\n    };\n    taskList.push(task);\n    taskInput.value = \"\";\n    render();\n}\nfunction render() {\n    let resultHTML = \"\";\n    list = [];\n    if (mode === \"all\") list = taskList;\n    else if (mode === \"ongoing\" || mode === \"done\") list = filterList;\n    for(let i = 0; i < list.length; i++)if (list[i].isComplete == true) resultHTML += ` <div class=\"task task-done\">\n            <div>${list[i].taskContent}</div>\n            <div>\n                <button class=\"checkBtn\" onclick=\"toggleComplete('${list[i].id}')\"></button> <button class=\"deleteBtn\" onclick=\"deleteTask('${list[i].id}')\"></button>\n            </div>\n        </div>`;\n    else resultHTML += ` <div class=\"task\">\n        <div>${list[i].taskContent}</div>\n        <div>\n            <button class=\"checkBtn\" onclick=\"toggleComplete('${list[i].id}')\"></button> <button class=\"deleteBtn\" onclick=\"deleteTask('${list[i].id}')\"></button>\n        </div>\n    </div>`;\n    document.getElementById(\"task-board\").innerHTML = resultHTML;\n}\nfunction toggleComplete(id) {\n    // console.log(\"id:\", id);\n    for(let i = 0; i < taskList.length; i++)if (taskList[i].id == id) {\n        // switch 반대값으로 바꾸기\n        taskList[i].isComplete = !taskList[i].isComplete;\n        break;\n    }\n    filter();\n}\nfunction deleteTask(id) {\n    for(let i = 0; i < taskList.length; i++)if (taskList[i].id == id) {\n        taskList.splice(i, 1);\n        break;\n    }\n    filter();\n}\nfunction filter(e) {\n    if (e) {\n        mode = e.target.id;\n        underLine.style.width = e.target.offsetWidth + \"px\";\n        underLine.style.left = e.target.offsetLeft + \"px\";\n        underLine.style.top = e.target.offsetTop + (e.target.offsetHeight - 4) + \"px\";\n    } // 진행중 상태에서 끝남으로 표시하면 바로 사라지는 부분은 event가 없음 그래서 조건추가\n    filterList = [];\n    if (mode == \"ongoing\") {\n        for(let i = 0; i < taskList.length; i++)if (taskList[i].isComplete === false) filterList.push(taskList[i]);\n    } else if (mode == \"done\") {\n        for(let i = 0; i < taskList.length; i++)if (taskList[i].isComplete === true) filterList.push(taskList[i]);\n    }\n    render();\n}\nfunction randomIDGenerate() {\n    return \"_\" + Math.random().toString(36).substr(2, 9);\n}\n\n//# sourceMappingURL=index.58f1b396.js.map\n","//유저가 값을 입력한다.\n// + 버튼누르면, 할일 추가\n//delete 버튼 누르면 할일 삭제\n//check버튼 누르면 할일이 끝나면서 밑줄이 간다\n//1. check 버튼을 클릭하는 순간 true false\n//2. true 면 끝난걸로 간주하고 밑줄그어주기\n//3. false면 안끝난거 원래대로\n\nlet taskInput = document.getElementById(\"task-input\");\nlet addBtn = document.getElementById(\"add-btn\");\nlet tabs = document.querySelectorAll(\".task-tabs div\");\nlet underLine = document.getElementById(\"underline\");\nlet taskList = [];\nlet mode = \"all\";\nlet filterList = [];\n// let list = [];\n\naddBtn.addEventListener(\"mousedown\", addTask);\n\ntaskInput.addEventListener(\"keydown\", function (event) {\n    if (event.keyCode === 13) {\n        addTask(event);\n    }\n});\n\nfor (let i = 1; i < tabs.length; i++) {\n    tabs[i].addEventListener(\"click\", function (event) {\n        filter(event);\n    });\n}\n\nfunction addTask() {\n    let taskValue = taskInput.value;\n    if (taskValue === \"\") return alert(\"할일을 입력해주세요\");\n    let task = {\n        id: randomIDGenerate(),\n        isComplete: false,\n        taskContent: taskValue,\n    };\n    taskList.push(task);\n    taskInput.value = \"\";\n    render();\n}\n\nfunction render() {\n    let resultHTML = \"\";\n    list = [];\n\n    if (mode === \"all\") {\n        list = taskList;\n    } else if (mode === \"ongoing\" || mode === \"done\") {\n        list = filterList;\n    }\n    for (let i = 0; i < list.length; i++) {\n        if (list[i].isComplete == true) {\n            resultHTML += ` <div class=\"task task-done\">\n            <div>${list[i].taskContent}</div>\n            <div>\n                <button class=\"checkBtn\" onclick=\"toggleComplete('${list[i].id}')\"></button> <button class=\"deleteBtn\" onclick=\"deleteTask('${list[i].id}')\"></button>\n            </div>\n        </div>`;\n        } else {\n            resultHTML += ` <div class=\"task\">\n        <div>${list[i].taskContent}</div>\n        <div>\n            <button class=\"checkBtn\" onclick=\"toggleComplete('${list[i].id}')\"></button> <button class=\"deleteBtn\" onclick=\"deleteTask('${list[i].id}')\"></button>\n        </div>\n    </div>`;\n        }\n    }\n    document.getElementById(\"task-board\").innerHTML = resultHTML;\n}\n\nfunction toggleComplete(id) {\n    // console.log(\"id:\", id);\n    for (let i = 0; i < taskList.length; i++) {\n        if (taskList[i].id == id) {\n            // switch 반대값으로 바꾸기\n            taskList[i].isComplete = !taskList[i].isComplete;\n            break;\n        }\n    }\n    filter();\n}\n\nfunction deleteTask(id) {\n    for (let i = 0; i < taskList.length; i++) {\n        if (taskList[i].id == id) {\n            taskList.splice(i, 1);\n            break;\n        }\n    }\n    filter();\n}\nfunction filter(e) {\n    if (e) {\n        mode = e.target.id;\n        underLine.style.width = e.target.offsetWidth + \"px\";\n        underLine.style.left = e.target.offsetLeft + \"px\";\n        underLine.style.top =\n            e.target.offsetTop + (e.target.offsetHeight - 4) + \"px\";\n    } // 진행중 상태에서 끝남으로 표시하면 바로 사라지는 부분은 event가 없음 그래서 조건추가\n\n    filterList = [];\n    if (mode == \"ongoing\") {\n        for (let i = 0; i < taskList.length; i++) {\n            if (taskList[i].isComplete === false) {\n                filterList.push(taskList[i]);\n            }\n        }\n    } else if (mode == \"done\") {\n        for (let i = 0; i < taskList.length; i++) {\n            if (taskList[i].isComplete === true) {\n                filterList.push(taskList[i]);\n            }\n        }\n    }\n    render();\n}\nfunction randomIDGenerate() {\n    return \"_\" + Math.random().toString(36).substr(2, 9);\n}\n"],"names":["taskInput","document","getElementById","addBtn","tabs","querySelectorAll","underLine","taskList","mode","filterList","addEventListener","addTask","event","keyCode","i","length","filter","e","target","id","style","width","offsetWidth","left","offsetLeft","top","offsetTop","offsetHeight","isComplete","push","render","taskValue","value","alert","task","Math","random","toString","substr","taskContent","resultHTML","list","innerHTML"],"version":3,"file":"index.58f1b396.js.map"}